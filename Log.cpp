/****************************************************************************************
*
*   Определение модуля Log
*
*   Обеспечивает запись сообщений в журнал отладки.
*
*   Автор: Людмила Огородникова и Александр Огородников, 2007-2010
*
****************************************************************************************/

#ifdef DEBUGLOG

#define _CRT_SECURE_NO_DEPRECATE

#include <windows.h>
#include <tchar.h>
#include <locale.h>
#include <stdio.h>
#include <stdarg.h>

/****************************************************************************************
*
*   Константы
*
****************************************************************************************/

// размер буфера, используемого в функции Log_Log
#define MAX_LOG_MSG_SIZE	2048

/****************************************************************************************
*
*   Глобальные переменные
*
****************************************************************************************/

// описатель файла-журнала отладки
static HANDLE g_hLogFile = INVALID_HANDLE_VALUE;

/****************************************************************************************
*
*   Функция Log_Init
*
*   Параметры
*       pszFileName - указатель на имя файла-журнала отладки
*
*   Возвращаемое значение
*       Нет
*
*   Создаёт файл-журнал отладки с именем, заданным параметром pszFileName.
*
****************************************************************************************/

void Log_Init(
	__in LPCTSTR pszFileName)
{
	setlocale(LC_ALL, "");

	g_hLogFile = CreateFile(pszFileName, GENERIC_WRITE,
		FILE_SHARE_READ | FILE_SHARE_WRITE, NULL,
		CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);

	if (g_hLogFile == INVALID_HANDLE_VALUE)
	{
		MessageBox(NULL, TEXT("Cannot create log file"), NULL, MB_OK);
		return;
	}
}

/****************************************************************************************
*
*   Функция Log_Uninit
*
*   Параметры
*       Нет
*
*   Возвращаемое значение
*       Нет
*
*   Закрывает файл-журнал отладки.
*
****************************************************************************************/

void Log_Uninit()
{
	if (g_hLogFile != INVALID_HANDLE_VALUE)
	{
		CloseHandle(g_hLogFile);
	}
}

/****************************************************************************************
*
*   Функция Log_Log
*
*   Параметры
*       pszMsg - указатель на строку форматирования
*       ... - опциональные аргументы
*
*   Возвращаемое значение
*       Нет
*
*   Записывает форматированную строку в журнал отладки. Не портит код ошибки,
*   возвращаемый функцией GetLastError.
*
****************************************************************************************/

void Log_Log(
	__in LPCSTR pszMsg,
	__in_opt ...)
{
	DWORD dwError = GetLastError();

	char pBuf[MAX_LOG_MSG_SIZE];

	va_list params;
	va_start(params, pszMsg);

	int cchBuf = _vsnprintf(pBuf, MAX_LOG_MSG_SIZE, pszMsg, params);

	if (cchBuf == -1) cchBuf = MAX_LOG_MSG_SIZE;

	DWORD cbWritten;

	WriteFile(g_hLogFile, pBuf, cchBuf, &cbWritten, NULL);

	SetLastError(dwError);
}

#endif // #ifdef DEBUGLOG
