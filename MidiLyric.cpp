/****************************************************************************************
*
*   Определение класса MidiLyric
*
*   Объект этого класса представляет собой слова песни из MIDI-файла как
*   последовательность метасобытий типа LYRIC или TEXT_EVENT.
*
*   Авторы: Людмила Огородникова и Александр Огородников, 2008-2010
*
****************************************************************************************/

#define _CRT_SECURE_NO_WARNINGS

#include <windows.h>

#include "Log.h"
#include "MidiLibrary.h"
#include "MidiTrack.h"
#include "MidiLyric.h"

/****************************************************************************************
*
*   Конструктор
*
*   Параметры
*       Нет
*
*   Возвращаемое значение
*       Нет
*
*   Инициализирует переменные объекта.
*
****************************************************************************************/

MidiLyric::MidiLyric()
{
	m_pMidiTrack = NULL;
}

/****************************************************************************************
*
*   Деструктор
*
*   Параметры
*       Нет
*
*   Возвращаемое значение
*       Нет
*
*   Ничего не делает. В частности, не трогает объект класса MidiTrack, заданный при
*   вызове метода InitSearch.
*
****************************************************************************************/

MidiLyric::~MidiLyric()
{
}

/****************************************************************************************
*
*   Метод InitSearch
*
*   Параметры
*       pMidiTrack - указатель на объект класса MidiTrack, представляющий собой трек
*                    MIDI-файла, в котором находятся слова песни
*       LyricEventType - тип метасобытий, в которых находятся слова песни
*                        (LYRIC или TEXT_EVENT)
*       DefaultCodePage - кодовая страница по умолчанию; если будут встречены символы,
*                         для которых не будет указана кодовая страница в самом
*                         MIDI-файле, то будет использоваться кодовая страница, заданная
*                         этим параметром
*
*   Возвращаемое значение
*       Нет
*
*   Инициализирует поиск метасобытий со словами песни в треке, заданном параметром
*   pMidiTrack. Тип метасобытий, которые надо искать, задаётся параметром LyricEventType.
*
****************************************************************************************/

void MidiLyric::InitSearch(
	__in MidiTrack *pMidiTrack,
	__in DWORD LyricEventType,
	__in UINT DefaultCodePage)
{
	m_pMidiTrack = pMidiTrack;
	m_pMidiTrack->ResetCurrentPosition();

	m_LyricEventType = LyricEventType;

	m_CodePage = DefaultCodePage;

	m_ctCurTime = 0;
}

/****************************************************************************************
*
*   Метод GetNextValidEvent
*
*   Параметры
*       pctEventTime - указатель на переменную, в которую будет записано количество
*                      тиков, прошедшее от начала трека до момента прихода очередного
*                      допустимого метасобытия; этот параметр может быть равен NULL
*       pwsBuffer - указатель на буфер, в который будет записан текст очередного
*                   допустимого метасобытия, преобразованный в кодировку Юникод; этот
*                   параметр может быть равен NULL
*       pcchReturned - указатель на переменную, в которую будет записано количество
*                      символов, помещённых в буфер pwsBuffer
*
*   Возвращаемое значение
*       MIDILYRIC_SUCCESS - текст очередного допустимого метасобытия успешно возвращён;
*       MIDILYRIC_LYRIC_END - метасобытия искомого типа кончились, в этом случае
*                             содержимое переменных, на которые указывают параметры
*                             pctEventTime, pwsBuffer и pcchReturned, не определено.
*
*   Возвращает текст очередного допустимого метасобытия искомого типа, преобразованный в
*   кодировку Юникод. После вызова метода InitSearch этот метод возвращает информацию о
*   первом допустимом метасобытии искомого типа. Метод никогда не возвращает пустые
*   метасобытия, т.е. на выходе метода содержимое переменной, на которую указывает
*   параметр pcchReturned, всегда больше нуля. Если параметр pwsBuffer равен NULL, метод
*   не возвращает текст метасобытия, но возвращает количество символов в нём в
*   переменной, на которую указывает параметр pcchReturned. Если количество символов в
*   тексте очередного метасобытия искомого типа больше MAX_SYMBOLS_PER_LYRIC_EVENT, это
*   метасобытие считается недопустимым и отбрасывается. Другие критерии допустимости
*   метасобытий смотрите в исходном коде метода.
*
*   Обработка текста, осуществляемая этим методом, называется вторым этапом обработки
*   слов песни.
*
****************************************************************************************/

MIDILYRICRESULT MidiLyric::GetNextValidEvent(
	__out_opt DWORD *pctEventTime,
	__out_opt WCHAR pwsBuffer[MAX_SYMBOLS_PER_LYRIC_EVENT],
	__out DWORD	*pcchReturned)
{
	// размер временного буфера, который будет передаваться методу
	// GetNextPreprocessedEvent
	const DWORD cchTempBuf = 1024;

	// временный буфер, который будет передаваться методу GetNextPreprocessedEvent
	WCHAR pwsTempBuf[cchTempBuf];

	// считываем метасобытия искомого типа до тех пор, пока не найдём допустимое
	// метасобытие
	while (true)
	{
		// количество символов в тексте очередного метасобытия искомого типа;
		// метод GetNextPreprocessedEvent гарантирует, что оно будет больше нуля
		DWORD cchEventText;

		// считываем очередное метасобытие искомого типа
		MIDILYRICRESULT LyricRes = GetNextPreprocessedEvent(pwsTempBuf, cchTempBuf, 
			&cchEventText);

		// если в треке больше не осталось метасобытий искомого типа, возвращаемся
		if (LyricRes == MIDILYRIC_LYRIC_END) return MIDILYRIC_LYRIC_END;

		if (cchEventText > MAX_SYMBOLS_PER_LYRIC_EVENT)
		{
			// количество символов в метасобытии больше MAX_SYMBOLS_PER_EVENT,
			// отбрасываем его
			continue;
		}

		DWORD i;

		// цикл по всем символам метасобытия
		for (i = 0; i < cchEventText; i++)
		{
			// проверяем, не содержит ли текст метасобытия символ '@'
			if (pwsTempBuf[i] == L'@') break;
		}

		// если текст метасобытия содержит символ '@', то отбрасываем это метасобытие
		if (i < cchEventText) continue;

		// заполняем переменную, на которую указывает параметр pctEventTime
		if (pctEventTime != NULL) *pctEventTime = m_ctCurTime;

		// заполняем буфер, на который указывает параметр pwsBuffer
		if (pwsBuffer != NULL) wcsncpy(pwsBuffer, pwsTempBuf, cchEventText);

		// заполняем переменную, на которую указывает параметр pcchReturned
		*pcchReturned = cchEventText;

		return MIDILYRIC_SUCCESS;
	}
}

/****************************************************************************************
*
*   Метод GetNextPreprocessedEvent
*
*   Параметры
*       pwsBuffer - указатель на буфер, в который будет записан текст очередного
*                   метасобытия искомого типа, преобразованный в кодировку Юникод
*       cchBuffer - размер буфера pwsBuffer в символах
*       pcchReturned - указатель на переменную, в которую будет записано количество
*                      символов, помещённых в буфер pwsBuffer
*
*   Возвращаемое значение
*       MIDILYRIC_SUCCESS - текст очередного метасобытия успешно возвращён;
*       MIDILYRIC_LYRIC_END - метасобытия искомого типа кончились, в этом случае
*                             содержимое переменных, на которые указывают параметры
*                             pwsBuffer и pcchReturned, не определено.
*
*   Возвращает текст очередного метасобытия типа m_LyricEventType, преобразованный в
*   кодировку Юникод. Метод никогда не возвращает пустые метасобытия, т.е. на выходе
*   метода содержимое переменной, на которую указывает параметр pcchReturned, всегда
*   больше нуля. Метод отбрасывает метасобытия, длина текста которых превышает размер
*   буфера pwsBuffer.
*
*   Обработка текста, осуществляемая этим методом, называется первым этапом обработки
*   слов песни.
*
****************************************************************************************/

MIDILYRICRESULT MidiLyric::GetNextPreprocessedEvent(
	__out LPWSTR pwsBuffer,
	__in DWORD cchBuffer,
	__out DWORD *pcchReturned)
{
	// считываем события трека до тех пор, пока не найдём непустое метасобытие искомого
	// типа
	while (true)
	{
		// дельта-время события в тиках
		DWORD ctDeltaTime;

		// указатель на первый байт данных события
		BYTE *pEventData;

		// считываем очередное событие трека
		DWORD Event = m_pMidiTrack->GetNextEvent(&ctDeltaTime, &pEventData);

		// если в треке больше не осталось событий, возвращаемся
		if (Event == REAL_TRACK_END) return MIDILYRIC_LYRIC_END;

		// обновляем текущее время (время в тиках, прошедшее с начала трека)
		m_ctCurTime += ctDeltaTime;

		// отбрасываем любые события, кроме метасобытий типа m_LyricEventType
		if (Event != m_LyricEventType) continue;

		// получаем длину текста в текущем метасобытии (в байтах);
		// после вызова этой функции pEvent указывает на первый байт текста
		DWORD cBytes = GetNumberFromVLQ(&pEventData);

		// отбрасываем пустые метасобытия искомого типа
		if (cBytes == 0) continue;

		int cchReturned = MultiByteToWideChar(m_CodePage, 0,
			(LPCSTR) pEventData, cBytes, pwsBuffer, cchBuffer);

		if (cchReturned == 0)
		{
			LOG("MultiByteToWideChar failed (error %u)\n", GetLastError());

            // предположительно, здесь могут встретиться только две ошибки:
			// 1) ERROR_NO_UNICODE_TRANSLATION - метасобытие содержит только один символ
			//    и он некорректный,
			// 2) ERROR_INSUFFICIENT_BUFFER - длина текста метасобытия больше размера
			//    буфера pwsBuffer.
			// в любом случае отбрасываем такое метасобытие

			continue;
		}

		*pcchReturned = cchReturned;

		return MIDILYRIC_SUCCESS;
	}
}
