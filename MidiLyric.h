/****************************************************************************************
*
*   Объявление класса MidiLyric
*
*   Объект этого класса представляет собой слова песни из MIDI-файла как
*   последовательность метасобытий типа LYRIC или TEXT_EVENT.
*
*   Авторы: Людмила Огородникова и Александр Огородников, 2008-2010
*
****************************************************************************************/

/****************************************************************************************
*
*   Константы
*
****************************************************************************************/

// максимально допустимое количество символов песни на одно метасобытие;
// если количество символов в метасобытии превышает данный порог, это метасобытие
// отбрасывается
#define MAX_SYMBOLS_PER_LYRIC_EVENT		15

// коды возврата для методов класса
enum MIDILYRICRESULT
{
	MIDILYRIC_SUCCESS,
	MIDILYRIC_LYRIC_END
};

/****************************************************************************************
*
*   Класс MidiLyric
*
****************************************************************************************/

class MidiLyric
{
	// указатель на объект класса MidiTrack, представляющий собой трек MIDI-файла,
	// в котором находятся слова песни
	MidiTrack *m_pMidiTrack;

	// тип метасобытий, в которых находятся слова песни (LYRIC или TEXT_EVENT)
	DWORD m_LyricEventType;

	// текущая кодовая страница
	UINT m_CodePage;

	// текущее время (время в тиках, прошедшее с начала трека)
	DWORD m_ctCurTime;

public:

	MidiLyric();
	~MidiLyric();

	// инициализирует поиск метасобытий со словами песни в указанном треке
	void InitSearch(
		__in MidiTrack *pMidiTrack,
		__in DWORD LyricEventType,
		__in UINT DefaultCodePage);

	// возвращает информацию об очередном допустимом метасобытии со словами песни
	MIDILYRICRESULT GetNextValidEvent(
		__out_opt DWORD *pctEventTime,
		__out_opt WCHAR pwsBuffer[MAX_SYMBOLS_PER_LYRIC_EVENT],
		__out DWORD	*pcchReturned);

private:

	// возвращает промежуточную информацию об очередном метасобытии искомого типа
	MIDILYRICRESULT GetNextPreprocessedEvent(
		__out LPWSTR pwsBuffer,
		__in DWORD cchBuffer,
		__out DWORD	*pcchReturned);
};
